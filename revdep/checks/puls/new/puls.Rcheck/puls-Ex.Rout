
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "puls"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('puls')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("PULS")
> ### * PULS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: PULS
> ### Title: Partitioning Using Local Subregions (PULS)
> ### Aliases: PULS
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("arctic_2019")
> ### * arctic_2019
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arctic_2019
> ### Title: NOAA's Arctic Sea Daily Ice Extend Data
> ### Aliases: arctic_2019
> ### Keywords: datasets
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(lubridate)

Attaching package: 'lubridate'

The following objects are masked from 'package:base':

    date, intersect, setdiff, union

> library(ggplot2)
> 
> data(arctic_2019)
> 
> # Create day in the year column to replace Month and Day
> north <-
+   arctic_2019 %>%
+   mutate(yday = yday(make_date(Year, Month, Day)),
+          .keep = "all") %>%
+   select(Year, yday, Extent)
> 
> ggplot(north) +
+   geom_linerange(aes(x = yday, ymin = Year - 0.2, ymax = Year + 0.2),
+                  size = 0.5, color = "red") +
+   scale_y_continuous(breaks = seq(1980, 2020, by = 5),
+                      minor_breaks = NULL) +
+   labs(x = "Day",
+        y = "Year",
+        title = "Measurement frequencies were not always the same")
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2', 'package:lubridate', 'package:dplyr'

> nameEx("fdistmatrix")
> ### * fdistmatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fdistmatrix
> ### Title: Distance Between Functional Objects
> ### Aliases: fdistmatrix
> 
> ### ** Examples
> 
> library(fda)
Loading required package: splines
Loading required package: Matrix
Loading required package: fds
Loading required package: rainbow
Loading required package: MASS
Loading required package: pcaPP
Loading required package: RCurl

Attaching package: 'fda'

The following object is masked from 'package:graphics':

    matplot

> # Examples taken from fda::Data2fd()
> data(gait)
> # Function only works on two dimensional data
> gait <- gait[, 1:5, 1]
> gaitbasis3 <- create.fourier.basis(nbasis = 5)
> gaitfd3 <- Data2fd(gait, basisobj = gaitbasis3)
'y' is missing, using 'argvals'
'argvals' is missing;  using seq( 0 ,  1 , length= 20 )
> 
> fdistmatrix(gaitfd3, c(0.2, 0.4), "usc")
         boy1     boy2     boy3     boy4     boy5
boy1 0.000000 1.508725 2.702666 2.959672 6.555149
boy2 1.508725 0.000000 2.089777 3.740105 7.326595
boy3 2.702666 2.089777 0.000000 5.570693 9.180862
boy4 2.959672 3.740105 5.570693 0.000000 3.643998
boy5 6.555149 7.326595 9.180862 3.643998 0.000000
> 
> 
> 
> cleanEx()

detaching 'package:fda', 'package:fds', 'package:RCurl',
  'package:rainbow', 'package:pcaPP', 'package:MASS', 'package:Matrix',
  'package:splines'

> nameEx("ggwave")
> ### * ggwave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggwave
> ### Title: Plot the Partitioned Functional Wave by PULS
> ### Aliases: ggwave
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.PULS")
> ### * plot.PULS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.PULS
> ### Title: Plot PULS Splitting Rule Tree
> ### Aliases: plot.PULS
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("print.PULS")
> ### * print.PULS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.PULS
> ### Title: Print PULS Clustering Result
> ### Aliases: print.PULS
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.57 0.28 3.09 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
